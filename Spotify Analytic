# For this project, I downloaded Spotify data from Kaggle.
# Created a table to insert Spotify data.
# Lastly, performed analytics on the data using SQL. 

#Creating the table: 
CREATE TABLE BIT_DB.Spotifydata (
id integer PRIMARY KEY,
artist_name varchar NOT NULL,
track_name varchar NOT NULL,
track_id varchar NOT NULL,
popularity integer NOT NULL,
danceability decimal(4,3) NOT NULL,
energy decimal(4,3) NOT NULL,
key integer NOT NULL,
loudness decimal(5,3) NOT NULL,
mode integer NOT NULL,
speechiness decimal(5,4) NOT NULL,
acousticness decimal(6,5) NOT NULL,
instrumentalness text NOT NULL,
liveness decimal(5,4) NOT NULL,
valence decimal(4,3) NOT NULL,
tempo decimal(6,3) NOT NULL,
duration_ms integer NOT NULL,
time_signature integer NOT NULL 
)

#Inserted the Spotify Data .csv into the table.

#Expolore data using the following SQL. 

#0. "What is the average danceability by artist and track?"
SELECT AVG(danceability), artist_name, track_name
FROM BIT_DB.SpotifyData
GROUP BY artist_name
LIMIT 10

#1."What's the average danceability for the 10 most popular songs?"
SELECT AVG(danceability) 
FROM BIT_DB.Spotifydata
ORDER BY Popularity desc 
LIMIT 10

2. "What's the average danceability for the 10 least popular songs?"
SELECT AVG(danceability) 
FROM BIT_DB.Spotifydata 
ORDER BY Popularity ASC
LIMIT 10

3. As spotify tends to generate playlists based on high energy: "High In ENERGY", Top 10 Speechiest song playlist, selected from the list of the 20 most loudest songs
SELECT track_name, energy, speechiness
FROM BIT_DB.Spotifydata
ORDER By Energy DESC
LIMIT 10;

4.Average duration of the top 10 highest tempo songs
SELECT avg(duration_ms) 
FROM BIT_DB.Spotifydata
ORDER BY tempo desc LIMIT 10;

5.Top 10 Highest energy songs
SELECT track_name 
FROM BIT_DB.Spotifydata 
ORDER BY energy desc LIMIT 10;

6. Artist with the most danceable songs 
SELECT artist_name, AVG(danceability) AS Danceable_songs 
FROM BIT_DB.Spotifydata 
GROUP BY artist_name 
ORDER BY Danceable_songs desc LIMIT 1;

7.Top 5 Artists who writes the longest songs
SELECT artist_name, AVG(duration_ms) AS Longest_songs 
FROM BIT_DB.Spotifydata 
GROUP BY artist_name 
ORDER BY Longest_songs  desc LIMIT 5;

8.calculate the average popularity for the artists in the table. Then, for every artist with an average popularity of 90 or above, you need to show their name, their average popularity, and label them as a “Top Star”.

WITH popularity_average_CTE AS 
(SELECT s.artist_name,
AVG(s.popularity) AS average_popularity
FROM SpotifyData s 
GROUP BY s.artist_name)
 
SELECT artist_name, average_popularity,'Top Star' AS tag
FROM popularity_average_CTE
WHERE average_popularity>=90;
